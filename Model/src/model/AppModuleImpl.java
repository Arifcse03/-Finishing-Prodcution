package model;

import java.sql.CallableStatement;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import model.common.AppModule;

import model.lov.AdditionPOPVOImpl;
import model.lov.AreaLovVoImpl;
import model.lov.CodeDesreptionVOImpl;
import model.lov.FinishingLineLOVImpl;
import model.lov.operatingUnitsVOImpl;

import model.views.MnjMfgFinishProdDViewImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 12 11:26:15 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for MnjMfgFinishProdHView1.
     * @return MnjMfgFinishProdHView1
     */
    public ViewObjectImpl getMnjMfgFinishProdHView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFinishProdHView1");
    }

    /**
     * Container's getter for MnjMfgFinishProdLView1.
     * @return MnjMfgFinishProdLView1
     */
    public ViewObjectImpl getMnjMfgFinishProdLView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFinishProdLView1");
    }

    /**
     * Container's getter for MnjMfgFinishProdDView1.
     * @return MnjMfgFinishProdDView1
     */
    public ViewObjectImpl getMnjMfgFinishProdDView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFinishProdDView1");
    }

    /**
     * Container's getter for MnjMfgFinishProdLFkLink1.
     * @return MnjMfgFinishProdLFkLink1
     */
    public ViewLinkImpl getMnjMfgFinishProdLFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgFinishProdLFkLink1");
    }

    /**
     * Container's getter for MnjMfgFinishProdDFkLink1.
     * @return MnjMfgFinishProdDFkLink1
     */
    public ViewLinkImpl getMnjMfgFinishProdDFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgFinishProdDFkLink1");
    }


    public void FillLines() {

        ViewObject vo = getFillBPO1();


        RowSetIterator it = vo.createRowSetIterator("aa");
        String flag = null;

        while (it.hasNext()) {
            Row r = it.next();
            try {
                flag = r.getAttribute("Flag").toString();
                System.out.println("Flag -->" + flag);
                if (flag != null && flag.equals("Y"))
                    populateLines(r);
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();


    } //findSelLines


    public void popupDeselectActionListener() {

        ViewObject fillSize = this.getFillSizeVO1();
        RowSetIterator fillSizeRowSetIterator =
            fillSize.createRowSetIterator("fillSizeRowSetIterator");
        while (fillSizeRowSetIterator.hasNext()) {
            Row row = fillSizeRowSetIterator.next();
            row.setAttribute("SFlag", "N");
            System.out.println("OK....");
        }
        fillSizeRowSetIterator.closeRowSetIterator();
    }

    public void FillDetails() {

        ViewObject vo = getFillSizeVO1();
        RowSetIterator it = vo.createRowSetIterator("aa");
        String flag = null;

        while (it.hasNext()) {
            Row r = it.next();
            try {
                flag = r.getAttribute("SFlag").toString();

                if (flag != null && flag.equals("Y"))
                    populateDetails(r);
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();


    } //findSelLines


    public void populateLines(Row poprow) {

        Row linerow = createLine();
        linerow.setAttribute("BuyerId",
                             getPopulateValue(poprow, "CustAccountId"));

        linerow.setAttribute("BuyerName", getPopulateValue(poprow, "KnownAs"));
        linerow.setAttribute("BpoNo", getPopulateValue(poprow, "BpoNo"));
        linerow.setAttribute("SaleOrderId",
                             getPopulateValue(poprow, "HeaderId")); //DcpoNo
        linerow.setAttribute("Style", getPopulateValue(poprow, "StyleName"));
        linerow.setAttribute("Season", getPopulateValue(poprow, "Season"));
        linerow.setAttribute("StnNo", getPopulateValue(poprow, "StnNo"));
        linerow.setAttribute("LineNo", getPopulateValue(poprow, "LineNo"));
        linerow.setAttribute("InventoryItemId",
                             getPopulateValue(poprow, "InventoryItemId"));
        linerow.setAttribute("JobId", getPopulateValue(poprow, "WipEntityId"));
        linerow.setAttribute("DivisionId", getPopulateValue(poprow, "OrgId"));
        linerow.setAttribute("Color", getPopulateValue(poprow, "Color"));
        linerow.setAttribute("Wash", getPopulateValue(poprow, "Wash"));
        
        linerow.setAttribute("ProductyType",
                             getPopulateValue(poprow, "WipEntityName"));
        linerow.setAttribute("TotalInput",
                             getPopulateValue(poprow, "Quantity"));
        linerow.setAttribute("TotalProduction",
                             getPopulateValue(poprow, "BelQty"));
        linerow.setAttribute("TotalRejection",
                             getPopulateValue(poprow, "RejectionTotal"));
        linerow.setAttribute("Wip", getPopulateValue(poprow, "WipQty"));
        //linerow.setAttribute("Sam", getPopulateValue(poprow, "Sam"));
        linerow.setAttribute("SamValue", getPopulateValue(poprow, "Sam"));
        linerow.setAttribute("CurrentStyle", getPopulateValue(poprow, "CurrentStyle"));
        linerow.setAttribute("CurrentSeason", getPopulateValue(poprow, "CurrentSeason"));


    } //end of populateLines

    public void populateDetails(Row poprow) {

        Row linerow = createDetail();
        linerow.setAttribute("SizeValue",
                             getPopulateValue(poprow, "InseamSizeConcat"));

        linerow.setAttribute("SizeQty", getPopulateValue(poprow, "SizeQty"));
        linerow.setAttribute("TotalInput",
                             getPopulateValue(poprow, "TotalQty"));
        linerow.setAttribute("SizeInseam", getPopulateValue(poprow, "Inseam"));
        linerow.setAttribute("TotalProd",
                             getPopulateValue(poprow, "PrevProdQty"));
        linerow.setAttribute("TotalRej",
                             getPopulateValue(poprow, "DayRejPreQty"));
        linerow.setAttribute("BlncQty", getPopulateValue(poprow, "WipQty"));


    } //end of populateLines

    public Row createLine() {

        ViewObject vo = getMnjMfgFinishProdLView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public Row createDetail() {

        ViewObject vo = getMnjMfgFinishProdDView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }


    /**
     * Container's getter for FillBPO1.
     * @return FillBPO1
     */
    public ViewObjectImpl getFillBPO1() {
        return (ViewObjectImpl)findViewObject("FillBPO1");
    }

    /**
     * Container's getter for FillSizeVO1.
     * @return FillSizeVO1
     */
    public ViewObjectImpl getFillSizeVO1() {
        return (ViewObjectImpl)findViewObject("FillSizeVO1");
    }

    public String completion(String headerId) {


        String status = null;
        String stmt =
            "BEGIN :1 := mnj_mfg_finishingprod_pkg.CALL_JOB_COMPLETION(:2, :3, :4, :5, :6); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.setInt(2, Integer.parseInt(headerId));
            cs.setInt(3, 0);
            cs.setInt(4, 0);
            cs.setInt(5, 0);
            cs.setInt(6, 1110);
            cs.execute();
            status = cs.getString(1);
            cs.close();

        } catch (Exception e) {
            status = e.getMessage();
        }
        System.out.println(headerId + "status--->" + status);
        return status;


    }

    public String callPost(String headerId) {

        System.out.println("Header Id ----------->" + headerId);
        String status = null;
        String stmt =
            "BEGIN :1 := mnj_mfg_finishingprod_pkg.CALL_POST(:2, :3, :4, :5, :6); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.setInt(2, Integer.parseInt(headerId));
            cs.setInt(3, 0);
            cs.setInt(4, 0);
            cs.setInt(5, 0);
            cs.setInt(6, 1110);
            cs.execute();
            status = cs.getString(1);
            cs.close();

        } catch (Exception e) {
            status = e.getMessage();
        }
        return status;


    }


    /**
     * Container's getter for operatingUnitsVO1.
     * @return operatingUnitsVO1
     */
    public operatingUnitsVOImpl getoperatingUnitsVO1() {
        return (operatingUnitsVOImpl)findViewObject("operatingUnitsVO1");
    }
    /////////////////////////////////////////////////

    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {


        if (userId != null) {
            // String flag = getFlagValue(userId, respId);
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            //  userSession.setAttribute("Flag", flag);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("unitName", getUnitName(orgId));
        }
    }


    public String getUnitName(String orgId) {

        ViewObject vo = getoperatingUnitsVO1();
        vo.setWhereClause("ORGANIZATION_ID = " + orgId);
        vo.executeQuery();
        String name = null;
        vo.first();

        try {
            name = vo.getCurrentRow().getAttribute("Name").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return name;

    }
    ///////////////////////////////////////////////////////////////////////////////

    public int sumtotalProduction() {
        System.out.println("enter sumtotalProduction  2 --->");
        ViewObject vo = getMnjMfgFinishProdLView1();
        double total_pro = 0;
        int result = 0;
        String stmt = "BEGIN :1 := getsumtotalQuantityFinishing(); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.execute();
            total_pro = cs.getDouble(1);

            System.out.println("total_pro " + total_pro);

            result = cs.getInt(1);
            cs.close();
            vo.getCurrentRow().setAttribute("TotalProduction", total_pro);

        } catch (Exception e) {
        }
        return result;


    }


    public int sumtotalRejection() {
        System.out.println("enter sumtotalRejection  2 --->");
        ViewObject vo = getMnjMfgFinishProdLView1();
        double total_pro = 0;
        int result = 0;
        String stmt = "BEGIN :1 := getsumRejectionQtyFinishing(); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.execute();
            total_pro = cs.getDouble(1);

            System.out.println("total_pro " + total_pro);

            result = cs.getInt(1);
            cs.close();
            vo.getCurrentRow().setAttribute("TotalRejection", total_pro);

        } catch (Exception e) {
        }
        return result;


    }
    ///////////////////////////////////////////////////////

    public int sumtotalprodetail() {
        System.out.println("enter sumtotalRejection  2 --->");
        ViewObject vo = getMnjMfgFinishProdDView1();
        double total_pro = 0;
        int result = 0;
        String stmt = "BEGIN :1 := getsumTotalDayDetailFinish(); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.execute();
            total_pro = cs.getDouble(1);

            System.out.println("total_pro " + total_pro);

            result = cs.getInt(1);
            cs.close();
            vo.getCurrentRow().setAttribute("TotalProd", total_pro);

        } catch (Exception e) {
        }
        return result;


    }
    /////////////////////////////////////////////////////

    public int sumtotalRejectiondetail() {
        System.out.println("enter sumtotalRejection  2 --->");
        ViewObject vo = getMnjMfgFinishProdDView1();
        double total_pro = 0;
        int result = 0;
        String stmt = "BEGIN :1 := getsumTotalRejDetailFinish(); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.execute();
            total_pro = cs.getDouble(1);

            System.out.println("total_pro " + total_pro);

            result = cs.getInt(1);
            cs.close();
            vo.getCurrentRow().setAttribute("TotalRej", total_pro);

        } catch (Exception e) {
        }
        return result;


    }
    /////////////////////////////////////////////////////

    /////////////////////////////////////////////////////

    public String CalculateTotalProductionNewLINE(String headerId) {
        System.out.println("enter in AM LEAVEL -->");
        String vResult = null;
        String status = null;
        String HeaderId = getHeaderId();
        System.out.println(headerId + " New--->" + HeaderId);
        String stmt = "BEGIN MNJ_MFG_CALCULATION_FINISHING(:1,:2); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(HeaderId));
            cs.execute();
            vResult = cs.getString(2);
            cs.close();
            System.out.println("CALL PROCEDUR IN AM LEAVEL -->");
        } catch (Exception e) {
            status = e.getMessage();
        }
        System.out.println(headerId + "status--->" + vResult);

        RefreshBlocks();

        return vResult;


    }

    public void RefreshBlocks() {
        ViewObject findViewObjectDetail = getMnjMfgFinishProdDView1();
        ViewObject findViewObjectLine = getMnjMfgFinishProdLView1();


        findViewObjectDetail.executeQuery();
        findViewObjectLine.executeQuery();

    }


    public String getHeaderId() {
        String v = null;

        ViewObject findViewObject = getMnjMfgFinishProdHView1();
        v = findViewObject.getCurrentRow().getAttribute("HeaderId").toString();
        return v;
    }

    public void setRollwhereClause1() {
        System.out.println("Wher clause cut no -->" + getstyle());

        ViewObject vo = getFillSizeVO1();
        //vo.setWhereClause("OC_NO = '"+getstyle()+"'");

        //        vo.setWhereClause("OC_NO='" + getstyle() + "' and LINE_NO='" +
        //                          getSLno() + "'");

        vo.setWhereClause("STYLE_NAME = '" + getstyle_name() +
                          "'and SEASON = '" + getseason() + "'and OC_NO = '" +
                          getstyle() + "' and LINE_NO = '" + getSLno() +
                          "' and COLOR = '" + getcolor() + "'");


        vo.executeQuery();
    }


    public String getstyle_name() {

        ViewObject vo = getMnjMfgFinishProdLView1();
        String Style = null;
        try {
            Style = vo.getCurrentRow().getAttribute("Style").toString();
            System.out.println("Style: " + Style);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return Style;

    }

    public String getcolor() {

        ViewObject vo = getMnjMfgFinishProdLView1();
        String Color = null;
        try {
            Color = vo.getCurrentRow().getAttribute("Color").toString();
            System.out.println("Color: " + Color);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return Color;

    }

    public String getstyle() {

        ViewObject vo = getMnjMfgFinishProdLView1();
        String cutNo = null;
        try {
            cutNo = vo.getCurrentRow().getAttribute("StnNo").toString();
            System.out.println("cutNo: " + cutNo);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return cutNo;

    }

    public String getseason() {

        ViewObject vo = getMnjMfgFinishProdLView1();
        String Season = null;
        try {
            Season = vo.getCurrentRow().getAttribute("Season").toString();
            System.out.println("Season: " + Season);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return Season;

    }

    /////////

    public String getSLno() {

        ViewObject vo = getMnjMfgFinishProdLView1();
        String stno = null;
        try {
            stno = vo.getCurrentRow().getAttribute("LineNo").toString();
            System.out.println("stno: " + stno);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return stno;

    }


    /**
     * Container's getter for AdditionVO1.
     * @return AdditionVO1
     */
    public ViewObjectImpl getAdditionVO1() {
        return (ViewObjectImpl)findViewObject("AdditionVO1");
    }

    /**
     * Container's getter for HederAdditionVL1.
     * @return HederAdditionVL1
     */
    public ViewLinkImpl getHederAdditionVL1() {
        return (ViewLinkImpl)findViewLink("HederAdditionVL1");
    }

    /**
     * Container's getter for AdditionPOPVO1.
     * @return AdditionPOPVO1
     */
    public AdditionPOPVOImpl getAdditionPOPVO1() {
        return (AdditionPOPVOImpl)findViewObject("AdditionPOPVO1");
    }
    /////////////////////////////// POPUP NEW/////////////////////////

    public void setSizeWherCaluseNew() {
        System.out.println("Where clause Style -->" + getHeader_id());

        ViewObject vo = getAdditionPOPVO1();
        vo.setWhereClause("HEADER_ID = " + getHeader_id());
        System.out.println("Where clause Style HEADER_ID -->" +
                           getHeader_id());
        vo.executeQuery();
    }

    public String getHeader_id() {

        ViewObject vo = getMnjMfgFinishProdHView1();
        String cutNo1 = null;
        try {
            cutNo1 = vo.getCurrentRow().getAttribute("HeaderId").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return cutNo1;

    }


    public void FillLinesNEW() {
        System.out.println("FillLines enter ----------->");

        ViewObject vo = getAdditionPOPVO1();


        RowSetIterator it = vo.createRowSetIterator("aa");
        String flag = null;

        while (it.hasNext()) {
            Row r = it.next();
            try {
                flag = r.getAttribute("FlagNEW").toString();
                System.out.println("FlagNEW -->" + flag);
                if (flag != null && flag.equals("Y"))
                    populateLinesNEW(r);
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();


    } //findSelLines

    public void populateLinesNEW(Row poprow) {
        System.out.println("enter in populateLines -->");
        Row linerow = createLineNEW();
        linerow.setAttribute("Color", getPopulateValue(poprow, "Color"));
        linerow.setAttribute("Wah", getPopulateValue(poprow, "Wash"));
        linerow.setAttribute("Season", getPopulateValue(poprow, "Season"));
        linerow.setAttribute("Style", getPopulateValue(poprow, "Style"));
        linerow.setAttribute("Buyer", getPopulateValue(poprow, "BuyerName"));

        System.out.println("enter in populateLines SEASON -->" +
                           getPopulateValue(poprow, "Season"));

        System.out.println("enter in populateLines COLOR -->" +
                           getPopulateValue(poprow, "Color"));
        linerow.setAttribute("LineNo", getPopulateValue(poprow, "LineNo"));
        linerow.setAttribute("CurrentStyle", getPopulateValue(poprow, "CurrentStyle"));
        linerow.setAttribute("CurrentSeason", getPopulateValue(poprow, "CurrentSeason"));
        System.out.println("enter in populateLines SublineNo -->" +
                           getPopulateValue(poprow, "SublineNo"));


    } //end of populateLines

    public Row createLineNEW() {
        System.out.println("enter in createLine-->");
        ViewObject vo = getAdditionVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        System.out.println("enter in createLine end-->");
        return row;
    } //end of createHeader

    //////////////////////////////////


    /**
     * Container's getter for FinishOffStandVO1.
     * @return FinishOffStandVO1
     */
    public ViewObjectImpl getFinishOffStandVO1() {
        return (ViewObjectImpl)findViewObject("FinishOffStandVO1");
    }

    /**
     * Container's getter for HeaderOffStandardHVL1.
     * @return HeaderOffStandardHVL1
     */
    public ViewLinkImpl getHeaderOffStandardHVL1() {
        return (ViewLinkImpl)findViewLink("HeaderOffStandardHVL1");
    }

    /**
     * Container's getter for FinishOffStandLVO1.
     * @return FinishOffStandLVO1
     */
    public ViewObjectImpl getFinishOffStandLVO1() {
        return (ViewObjectImpl)findViewObject("FinishOffStandLVO1");
    }

    /**
     * Container's getter for HeaderLineOffStandardVL1.
     * @return HeaderLineOffStandardVL1
     */
    public ViewLinkImpl getHeaderLineOffStandardVL1() {
        return (ViewLinkImpl)findViewLink("HeaderLineOffStandardVL1");
    }

    /**
     * Container's getter for FinishingLineLOV1.
     * @return FinishingLineLOV1
     */
    public FinishingLineLOVImpl getFinishingLineLOV1() {
        return (FinishingLineLOVImpl)findViewObject("FinishingLineLOV1");
    }

    /**
     * Container's getter for AreaLovVo1.
     * @return AreaLovVo1
     */
    public AreaLovVoImpl getAreaLovVo1() {
        return (AreaLovVoImpl)findViewObject("AreaLovVo1");
    }

    /**
     * Container's getter for CodeDesreptionVO1.
     * @return CodeDesreptionVO1
     */
    public CodeDesreptionVOImpl getCodeDesreptionVO1() {
        return (CodeDesreptionVOImpl)findViewObject("CodeDesreptionVO1");
    }
    //////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////

    public void selectAllLines(String FlagNEWTab) {

        System.out.println("ENTER AM select all line ---->");
        ViewObject populatevo = getCodeDesreptionVO1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select");
            row.setAttribute("FlagNEWTab", FlagNEWTab);
            // System.out.println("Get select ---->" + row.getAttribute("Flag"));

        }
    }

    //////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////

    public void FillLinesNEWTab() {
        System.out.println("FillLines enter ----------->");

        ViewObject vo = getCodeDesreptionVO1();


        RowSetIterator it = vo.createRowSetIterator("aa");
        String flag = null;

        while (it.hasNext()) {
            Row r = it.next();
            try {
                flag = r.getAttribute("FlagNEWTab").toString();
                System.out.println("FlagNEWTab -->" + flag);
                if (flag != null && flag.equals("Y"))
                    populateLinesNEWTab(r);
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();


    } //findSelLines

    public Row createLineNEWTab() {
        System.out.println("enter in createLine nwe tab-->");
        ViewObject vo = getFinishOffStandLVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        System.out.println("enter in createLine new tab end-->");
        return row;
    } //end of createHeader

    public void populateLinesNEWTab(Row poprow) {
        System.out.println("enter in populateLines -->");
        Row linerow = createLineNEWTab();

        linerow.setAttribute("Descreption",
                             getPopulateValue(poprow, "Description"));

        System.out.println("enter in populateLines end-->");
        linerow.setAttribute("CodeStandard",
                             getPopulateValue(poprow, "FlexValue"));
        System.out.println("enter in populateLines FlexValue -->" +
                           getPopulateValue(poprow, "FlexValue"));

    } //end of populateLines


}
